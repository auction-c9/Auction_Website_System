package com.example.auction_management.service;

import com.example.auction_management.exception.EmailException;
import com.example.auction_management.model.Customer;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.MailAuthenticationException;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSendException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;


@Service
public class EmailService {
    private static final Logger logger = LoggerFactory.getLogger(EmailService.class);
    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private TemplateEngine templateEngine;

    @Value("${spring.mail.username}") // L·∫•y t·ª´ application.properties
    private String fromEmail;

    public void sendVerificationEmail(String toEmail, String verificationLink) {
        try {
            // 1. T·∫°o MIME message
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

            // 2. Chu·∫©n b·ªã template context
            Context context = new Context();
            context.setVariable("verificationLink", verificationLink);

            // 3. Render HTML t·ª´ template
            String htmlContent = templateEngine.process("email-verification", context);

            // 4. Thi·∫øt l·∫≠p email
            helper.setFrom(fromEmail);
            helper.setTo(toEmail);
            helper.setSubject("üîó X√°c nh·∫≠n li√™n k·∫øt t√†i kho·∫£n");
            helper.setText(htmlContent, true); // true = HTML content

            // 5. G·ª≠i email
            mailSender.send(mimeMessage);
            logger.info("üì© ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë·∫øn: {}", toEmail);

        } catch (MessagingException e) {
            logger.error("‚ùå L·ªói t·∫°o email: {}", e.getMessage());
            throw new EmailException("L·ªói h·ªá th·ªëng khi t·∫°o email");
        } catch (MailAuthenticationException e) {
            logger.error("üîê L·ªói x√°c th·ª±c email: {}", e.getMessage());
            throw new EmailException("Sai th√¥ng tin x√°c th·ª±c email");
        } catch (MailSendException e) {
            logger.error("üö´ L·ªói g·ª≠i email: {}", e.getMessage());
            throw new EmailException("Kh√¥ng th·ªÉ g·ª≠i email");
        }
    }

    public void sendPasswordResetEmail(String toEmail, Customer customer, String code) {
        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

            Context context = new Context();
            context.setVariable("customer", customer);
            context.setVariable("code", code);

            String htmlContent = templateEngine.process("password-reset-email", context);

            helper.setFrom(fromEmail);
            helper.setTo(toEmail);
            helper.setSubject("üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
            helper.setText(htmlContent, true);

            mailSender.send(mimeMessage);
            logger.info("üì© ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn: {}", toEmail);
        } catch (MessagingException e) {
            logger.error("‚ùå L·ªói g·ª≠i email: {}", e.getMessage());
            throw new EmailException("Kh√¥ng th·ªÉ g·ª≠i email: " + e.getMessage());
        }
    }

    public void sendEmail(String to, String subject, String body, boolean isHtml) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom("daugiavn123@gmail.com");
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body, isHtml);

            mailSender.send(message);

        } catch (MailAuthenticationException e) {
            throw new MailAuthenticationException("L·ªói x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n g·ª≠i email!", e);
        } catch (MessagingException e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o email, vui l√≤ng th·ª≠ l·∫°i!", e);
        } catch (MailException e) {
            throw new RuntimeException("L·ªói trong qu√° tr√¨nh g·ª≠i email, vui l√≤ng th·ª≠ l·∫°i!", e);
        }
    }

}